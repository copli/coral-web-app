<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Coral de Homens Guerreiros de Cristo</title>
    <!-- Opcional: Você pode adicionar estilos CSS aqui ou em um arquivo .css separado -->
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        #admin-content { background-color: #e6ffe6; padding: 15px; border-radius: 5px; margin-top: 20px;}
        #login-area { background-color: #fff0e6; padding: 15px; border-radius: 5px; margin-top: 20px;}
        form div { margin-bottom: 10px; }
        label { display: inline-block; width: 80px; }
        input[type="email"], input[type="password"] { padding: 8px; border: 1px solid #ccc; border-radius: 4px; width: 200px; }
        button { padding: 10px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background-color: #45a049; }
        #admin-logout-button { background-color: #f44336; }
        #admin-logout-button:hover { background-color: #da190b; }
        #login-message { margin-top: 10px; }
    </style>
</head>
<body>
    <h1>CORAL DE HOMENS GUERREIROS DE CRISTO</h1>
    <!-- SEU CONTEÚDO HTML DO APP (carrossel, contador, menus, etc.) VIRÁ AQUI -->

        <div id="carousel-container">
        <!-- HTML para seu carrossel de fotos aqui -->
        <img src="foto1.jpg" alt="Foto do Grupo 1">
        <img src="foto2.jpg" alt="Foto do Grupo 2">
        <!-- Mais fotos -->
    </div>

    <div id="access-counter">
        Contador de Acessos: <span id="counter-display">0</span>
    </div>

    <nav id="main-menu">
        <ul>
            <li><a href="#musicas">Músicas</a></li>
            <li><a href="#artigos">Artigos</a></li>
            <li><a href="#avisos">Avisos</a></li>
            <li><a href="#admin">Área Admin</a></li>
        </ul>
    </nav>

    <main>
        <section id="musicas">
            <h2>Índice de Músicas</h2>
            <!-- Campo de busca, menu suspenso de músicas aqui -->
            <div id="music-list">
                <!-- Músicas carregadas pelo JavaScript do Firestore -->
            </div>
        </section>

        <section id="artigos">
            <h2>Artigos e Links</h2>
            <!-- Conteúdo de artigos aqui -->
        </section>

        <section id="avisos">
            <h2>Avisos do Administrador</h2>
            <!-- Conteúdo de avisos aqui -->
        </section>

        <section id="admin">
            <h2>Área Administrativa</h2>
            <!-- HTML para o formulário de login e área de admin -->
            <div id="login-area">
                <h3>Login do Administrador</h3>
                <form id="admin-login-form">
                    <div>
                        <label for="admin-email">Email:</label>
                        <input type="email" id="admin-email" required>
                    </div>
                    <div>
                        <label for="admin-password">Senha:</label>
                        <input type="password" id="admin-password" required>
                    </div>
                    <button type="submit">Entrar</button>
                    <p id="login-message" style="color: red;"></p>
                </form>
            </div>

            <div id="admin-content" style="display: none;">
                <h3>Bem-vindo, Administrador!</h3>
                <p>Aqui você poderá gerenciar músicas, fotos, artigos e avisos.</p>
                <button id="admin-logout-button">Sair</button>
                <!-- FUTURAS FERRAMENTAS DE ADMIN AQUI (adicionar música, etc.) -->
            </div>
        </section>
    </main>


    <!-- IMPORTANTE: A TAG SCRIPT DEVE TER type="module" -->
    <script type="module">
        // Importe as funções necessárias para os serviços do Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js";
        import { getFirestore, doc, getDoc, updateDoc, setDoc, increment } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore.js";
        import { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-auth.js";
        import { getStorage } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-storage.js";
        // import { getAnalytics } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-analytics.js"; // Opcional se for usar Analytics

        // Sua configuração do app web do Firebase
        const firebaseConfig = {
          apiKey: "AIzaSyAywv9Aj6TXKFwCxbYpOnEY3Ymtf4o77ic",
          authDomain: "coral-guerreiros.firebaseapp.com",
          projectId: "coral-guerreiros",
          storageBucket: "coral-guerreiros.firebasestorage.app",
          messagingSenderId: "117520114132",
          appId: "1:117520114132:web:71e40037c8261789ffb641",
          measurementId: "G-2GH6LGCJ80" // Este é para Analytics. Mantenha se for usar, ou remova.
        };

        // Inicialize o Firebase
        const app = initializeApp(firebaseConfig);

        // Obtenha uma referência para cada serviço que você vai usar
        const db = getFirestore(app);        // Para Cloud Firestore
        const auth = getAuth(app);          // Para Firebase Authentication
        const storage = getStorage(app);    // Para Cloud Storage
        // const analytics = getAnalytics(app); // Para Google Analytics (descomente se for usar)

        console.log("Firebase conectado, Firestore, Auth e Storage prontos!");

        // === Lógica do Contador de Acessos ===
        const counterRef = doc(db, "appInfo", "acessos"); // Referência ao documento 'acessos' na coleção 'appInfo'
        const counterDisplayElement = document.getElementById("counter-display"); // O elemento <span> no seu HTML

        if (counterDisplayElement) { // Garante que o elemento existe no HTML
            getDoc(counterRef)
                .then((docSnap) => {
                    let currentCount = 0;
                    if (docSnap.exists()) {
                        // Se o documento existe, pegue o valor atual e incremente
                        currentCount = docSnap.data().count || 0;
                        updateDoc(counterRef, {
                            count: increment(1) // Incrementa atomicamente o contador
                        });
                    } else {
                        // Se o documento não existe (primeira vez), crie-o com 1
                        setDoc(counterRef, {
                            count: 1
                        });
                        currentCount = 0; // O contador inicial será 1 após esta visita (o display mostra currentCount + 1)
                    }

                    // Atualiza o display imediatamente para a visita atual + 1
                    counterDisplayElement.textContent = currentCount + 1;

                })
                .catch((error) => {
                    console.error("Erro ao gerenciar contador de acessos:", error);
                });
        } else {
            console.warn("Elemento HTML 'counter-display' não encontrado. O contador de acessos não será exibido.");
        }
        // === Fim da Lógica do Contador de Acessos ===

        // === Lógica de Login do Administrador ===
        const adminLoginForm = document.getElementById("admin-login-form");
        const adminEmailInput = document.getElementById("admin-email");
        const adminPasswordInput = document.getElementById("admin-password");
        const loginMessage = document.getElementById("login-message");
        const loginArea = document.getElementById("login-area");
        const adminContent = document.getElementById("admin-content");
        const adminLogoutButton = document.getElementById("admin-logout-button");

        // Função para verificar o estado da autenticação (se o usuário já está logado)
        onAuthStateChanged(auth, (user) => { // 'auth' é a instância do Firebase Auth
            if (user) {
                // Usuário está logado
                loginArea.style.display = "none";
                adminContent.style.display = "block";
                console.log("Usuário logado:", user.email);
            } else {
                // Usuário não está logado
                loginArea.style.display = "block";
                adminContent.style.display = "none";
                console.log("Nenhum usuário logado.");
            }
        });

        // Lidar com o envio do formulário de login
        if (adminLoginForm) {
            adminLoginForm.addEventListener("submit", async (e) => { // 'async' para usar await
                e.preventDefault(); // Impede o recarregamento da página

                const email = adminEmailInput.value;
                const password = adminPasswordInput.value;

                try {
                    await signInWithEmailAndPassword(auth, email, password); // 'auth' é a instância do Firebase Auth
                    // Login bem-sucedido
                    loginMessage.textContent = "Login realizado com sucesso!";
                    loginMessage.style.color = "green";
                    adminEmailInput.value = ""; // Limpa os campos
                    adminPasswordInput.value = "";
                    // onAuthStateChanged já cuidará de mostrar o adminContent
                } catch (error) {
                    // Ocorreu um erro
                    let errorMessage = "";
                    switch (error.code) {
                        case "auth/invalid-email":
                            errorMessage = "Email inválido.";
                            break;
                        case "auth/user-not-found":
                            errorMessage = "Usuário não encontrado.";
                            break;
                        case "auth/wrong-password":
                            errorMessage = "Senha incorreta.";
                            break;
                        case "auth/invalid-credential": // Erro comum para email/senha inválidos em versões mais novas
                            errorMessage = "Email ou senha inválidos.";
                            break;
                        case "auth/too-many-requests":
                            errorMessage = "Muitas tentativas de login. Tente novamente mais tarde.";
                            break;
                        default:
                            errorMessage = "Erro de login: " + error.message;
                            break;
                    }
                    loginMessage.textContent = errorMessage;
                    loginMessage.style.color = "red";
                    console.error("Erro de login:", error);
                }
            });
        }

        // Lidar com o botão de Sair
        if (adminLogoutButton) {
            adminLogoutButton.addEventListener("click", async () => { // 'async' para usar await
                try {
                    await signOut(auth); // 'auth' é a instância do Firebase Auth
                    console.log("Usuário deslogado.");
                    // onAuthStateChanged já cuidará de mostrar o loginArea
                    loginMessage.textContent = "Você foi desconectado.";
                    loginMessage.style.color = "green";
                } catch (error) {
                    console.error("Erro ao fazer logout:", error);
                    loginMessage.textContent = "Erro ao fazer logout: " + error.message;
                    loginMessage.style.color = "red";
                }
            });
        }
        // === Fim da Lógica de Login do Administrador ===

    </script>

    <!-- Se você tiver outros arquivos JavaScript para sua lógica de app, pode importá-los aqui TAMBÉM como módulos -->
    <!-- Por exemplo: <script type="module" src="seu-app-script.js"></script> -->

</body>
</html>




Vou enviar o index.html para você incluir essas funcionalidades: