O meu projeto se chama coral-web-app e é composto por dois arquivos.
Vou enviar o conteúdo dos arquivos para você me ajudar a configurar o arquivo package.json

Ah, entendi perfeitamente! Com base nos seus dois arquivos ( index.html e article-detail.html ), posso afirmar que seu projeto não precisa de um processo de build complexo como os que usam TypeScript, React, Angular ou Vue.
Seu aplicativo é um projeto web "plain HTML, CSS e JavaScript", onde o JavaScript está diretamente incorporado (inline) e usa módulos ES carregados via CDN (como https://www.gstatic.com/firebasejs/... ). Isso significa que os próprios arquivos .html são, por assim dizer, o "output" final que o navegador vai entender e exibir.
Portanto, para o seu caso, o "comando de build" não será algo que transforma seu código-fonte em outra coisa. O que você vai "implantar" diretamente são esses arquivos HTML (e quaisquer imagens ou outros ativos que você tenha).
Mesmo assim, ter um arquivo package.json é uma ótima prática! Ele serve como um manifesto para o seu projeto e permite que você defina "atalhos" para comandos do Firebase CLI, tornando a implantação mais fácil e padronizada.
Configurando seu package.json

Você precisará ter o Node.js e o npm (ou Yarn) instalados no seu computador para usar o package.json e os comandos que ele define.
Crie a Pasta do Projeto e os Arquivos: Certifique-se de que seus dois arquivos ( index.html e article-detail.html ) estejam na raiz de uma pasta chamada coral-web-app (ou o nome que você preferir para o seu projeto).
Inicialize o package.json : Abra seu terminal ou prompt de comando, navegue até a pasta coral-web-app e execute:
npm init -y
Isso criará um arquivo package.json básico para você com as configurações padrão.
Edite o package.json : Abra o arquivo package.json que foi criado e adicione/modifique a seção "scripts" e outras informações conforme o exemplo abaixo:
{
  "name": "coral-web-app",
  "version": "1.0.0",
  "description": "Aplicativo web para o Coral de Homens Guerreiros de Cristo, construído com Firebase.",
  "main": "index.html",
  "scripts": {
    "deploy": "firebase deploy --only hosting",
    "serve": "firebase emulators:start --only hosting",
    "setup": "firebase init"
  },
  "keywords": [
    "firebase",
    "web",
    "html",
    "javascript",
    "coral-guerreiros"
  ],
  "author": "Seu Nome ou Nome da Organização",
  "license": "ISC",
  "devDependencies": {
    "firebase-tools": "^13.11.2"  // É bom fixar a versão do Firebase CLI
  }
}
Abrir
Explicação dos scripts:
"deploy" : Este comando é o que você usará para enviar seu aplicativo para o Firebase Hosting.
"serve" : Este é útil para testar seu aplicativo localmente usando os emuladores do Firebase, antes de fazer o deploy.
"setup" : Pode ser usado para (re)inicializar seu projeto Firebase localmente, configurando o Hosting.
Instale o firebase-tools (opcional, mas recomendado): Para garantir que você está usando uma versão específica do Firebase CLI e que outras pessoas que trabalhem no projeto usem a mesma, você pode instalá-lo como uma dependência de desenvolvimento:
npm install firebase-tools@13.11.2 --save-dev
(Verifique a versão mais recente do firebase-tools para colocar no package.json se quiser a última.)
Preparando e Publicando (Revisão):

Inicialize o Firebase Hosting no seu Projeto Local: No terminal, na pasta coral-web-app , execute:
firebase init hosting
Ele perguntará qual projeto Firebase usar (selecione coral-guerreiros ).
Crucial: Ele perguntará "What do you want to use as your public directory?" (Qual diretório você quer usar como seu diretório público?). Como seus arquivos HTML estão na raiz da sua pasta coral-web-app , você pode digitar . (um ponto) e pressionar Enter. Isso dirá ao Firebase para servir os arquivos diretamente da raiz da sua pasta.
Ele perguntará se é um aplicativo de página única ( Configure as a single-page app (rewrite all urls to /index.html)? ). Para o seu caso, como você tem article-detail.html , provavelmente você vai querer responder No para esta pergunta.
Para Testar Localmente:
npm run serve
Isso iniciará um servidor local e você poderá ver seu aplicativo no seu navegador, geralmente em http://localhost:5000 .
Para Publicar:
npm run deploy
Este comando empacotará seus arquivos (no seu caso, index.html , article-detail.html e quaisquer outros ativos como imagens que estejam na pasta configurada como pública) e os enviará para o Firebase Hosting.
Lembre-se daquele alerta importante sobre as Regras do Firestore . Antes de publicar amplamente, é vital que você reforce suas regras de segurança no console do Firebase Firestore para evitar acesso não autorizado aos seus dados.
Para explorar este tópico em mais detalhes, você poderia perguntar:
Você pode me dar um exemplo de regras de segurança do Firestore mais robustas para o meu aplicativo?
Como eu adiciono imagens ou outros ativos ao meu projeto para que sejam implantados junto com os arquivos HTML?
O que são os emuladores do Firebase e como eles me ajudam a desenvolver?